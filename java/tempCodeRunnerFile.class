// Source code is decompiled from a .class file using FernFlower decompiler.
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class PasswordEncryptor {
   private static final String SECRET_KEY = "MySuperSecretKey";
   private static final String ALGORITHM = "AES";

   public PasswordEncryptor() {
   }

   public static String encrypt(String var0) throws Exception {
      Cipher var1 = Cipher.getInstance("AES");
      SecretKeySpec var2 = new SecretKeySpec("MySuperSecretKey".getBytes(), "AES");
      var1.init(1, var2);
      byte[] var3 = var1.doFinal(var0.getBytes());
      return Base64.getEncoder().encodeToString(var3);
   }

   public static String decrypt(String var0) throws Exception {
      Cipher var1 = Cipher.getInstance("AES");
      SecretKeySpec var2 = new SecretKeySpec("MySuperSecretKey".getBytes(), "AES");
      var1.init(2, var2);
      byte[] var3 = Base64.getDecoder().decode(var0);
      byte[] var4 = var1.doFinal(var3);
      return new String(var4);
   }

   public static void main(String[] var0) throws Exception {
      if (var0.length < 2) {
         System.out.println("Usage: java -cp passwordencryptor.jar PasswordEncryptor <encrypt/decrypt> <password>");
      } else {
         String var1 = var0[0];
         String var2 = var0[1];
         if (var1.equalsIgnoreCase("encrypt")) {
            System.out.println("Encrypted Password: " + encrypt(var2));
         } else if (var1.equalsIgnoreCase("decrypt")) {
            System.out.println("Decrypted Password: " + decrypt(var2));
         } else {
            System.out.println("Invalid command. Use 'encrypt' or 'decrypt'.");
         }

      }
   }
}
